{
  // http://eslint.org/docs/rules/

  "ecmaFeatures": {
    "arrowFunctions": false,                    // enable arrow functions
    "binaryLiterals": false,                    // enable binary literals
    "blockBindings": false,                     // enable let and const (aka block bindings)
    "classes": false,                           // enable classes
    "defaultParams": false,                     // enable default function parameters
    "destructuring": false,                     // enable destructuring
    "forOf": false,                             // enable for-of loops
    "generators": false,                        // enable generators
    "modules": false,                           // enable modules and global strict mode
    "objectLiteralComputedProperties": false,   // enable computed object literal property names
    "objectLiteralDuplicateProperties": false,  // enable duplicate object literal properties in strict mode
    "objectLiteralShorthandMethods": false,     // enable object literal shorthand methods
    "objectLiteralShorthandProperties": false,  // enable object literal shorthand properties
    "octalLiterals": false,                     // enable octal literals
    "regexUFlag": false,                        // enable the regular expression u flag
    "regexYFlag": false,                        // enable the regular expression y flag
    "restParams": false,                        // enable the rest parameters
    "spread": false,                            // enable the spread operator
    "superInFunctions": false,                  // enable super references inside of functions
    "templateStrings": false,                   // enable template strings
    "unicodeCodePointEscapes": false,           // enable code point escapes
    "globalReturn": false,                      // allow return statements in the global scope
    "jsx": false                                // enable JSX
  },

  "env": {
    "amd": false,             // defines require() and define() as global variables as per the amd spec
    "applescript": false,     // AppleScript global variables.
    "browser": true,          // browser global variables
    "commonjs": false,         // CommonJS global variables and CommonJS scoping
                              // (use this for browser-only code that uses Browserify/WebPack).
    "embertest": false,       // Ember test helper globals.
    "es6": true,             // enable all ECMAScript 6 features except for modules.
    "jasmine": false,         // adds all of the Jasmine testing global variables for version 1.3 and 2.0
    "jest": false,            // Jest global variables.
    "jquery": <%= use.jquery %>,           // jquery global variables
    "meteor": false,          // Meteor global variables.
    "mocha": false,           // adds all of the Mocha testing global variables
    "mongo": false,           // MongoDB global variables.
    "nashorn": false,         // Java 8 Nashorn global variables.
    "node": false,            // Node.js global variables and Node.js-specific rules
    "phantomjs": false,       // phantomjs global variables
    "prototypejs": false,     // Prototype.js global variables.
    "protractor": false,      // Protractor global variables.
    "qunit": false,           // QUnit global variables.
    "serviceworker": false,   // Service Worker global variables.
    "shelljs": false,         // shelljs global variables
    "webextensions": false,   // WebExtensions globals.
    "worker": false,          // web workers global variables.
  },

  "globals": {
    // additional predefined global variables
    "ga": true<% if (use.outdatedBrowser) { %>,
    "outdatedBrowser": true<% } %>
  },

  "plugins": [
    // e.g. "react" (must run `npm install eslint-plugin-react` first)
  ],

  "rules": {
    ////////// Possible Errors //////////

    "comma-dangle": ["error", "never"],             // disallow trailing commas in object literals
    "no-cond-assign": "error",           // disallow assignment in conditional expressions
    "no-console": "error",               // disallow use of console (off by default in the node environment)
    "no-constant-condition": "error",    // disallow use of constant expressions in conditions
    "no-control-regex": "off",         // disallow control characters in regular expressions
    "no-debugger": "warn",              // disallow use of debugger
    "no-dupe-args": "error",             // disallow duplicate arguments in functions
    "no-dupe-keys": "error",             // disallow duplicate keys when creating object literals
    "no-duplicate-case": "error",        // disallow a duplicate case label
    "no-empty-character-class": "error", // disallow the use of empty character classes in regular expressions
    "no-empty": "error",                 // disallow empty statements
    "no-ex-assign": "error",             // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": "error",    // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": "off",          // disallow unnecessary parentheses (off by default)
    "no-extra-semi": "error",            // disallow unnecessary semicolons
    "no-func-assign": "error",           // disallow overwriting functions written as function declarations
    "no-inner-declarations": ["error", "functions"],    // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": "error",        // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": "error",  // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": "error",        // disallow negation of the left operand of an in expression
    "no-obj-calls": "error",             // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": "error",          // disallow multiple spaces in a regular expression literal
    "no-reserved-keys": "off",         // disallow reserved words being used as object literal keys (off by default)
    "no-sparse-arrays": "error",         // disallow sparse arrays
    "no-unreachable": "error",           // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": "error",                // disallow comparisons with the value NaN
    "valid-jsdoc": "off",              // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": "error",             // Ensure that the results of typeof are compared against a valid string
    "no-unexpected-multiline": "off",  // Avoid code that looks like two expressions but is actually one (off by default)


    ////////// Best Practices //////////

    "accessor-pairs": "off",                                       // enforce getter and setter pairs in objects
    "array-callback-return": "error",                              // enforce return statements in callbacks of array methods
    "block-scoped-var": "off",                                     // enforce the use of variables within the scope they are defined
    "class-methods-use-this": "error",                             // enforce that class methods utilize this
    "complexity": ["off", 11],                                     // enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": "off",                                    // require return statements to either always or never specify values
    "curly": ["error", "all"],                                     // enforce consistent brace style for all control statements
    "default-case": "off",                                         // require default cases in switch statements
    "dot-location": "off",                                         // enforce consistent newlines before and after dots
    "dot-notation": ["warn", { "allowKeywords": true }],           // enforce dot notation whenever possible
    "eqeqeq": "error",                                             // require the use of === and !==
    "guard-for-in": "error",                                       // require for-in loops to include an if statement
    "no-alert": "off",                                             // disallow the use of alert, confirm, and prompt
    "no-caller": "error",                                          // disallow the use of arguments.caller or arguments.callee
    "no-case-declarations": "off",                                 // disallow lexical declarations in case clauses
    "no-div-regex": "off",                                         // disallow division operators explicitly at the beginning of regular expressions
    "no-else-return": "off",                                       // disallow else blocks after return statements in if statements
    "no-empty-function": "warn",                                   // disallow empty functions
    "no-empty-pattern": "error",                                   // disallow empty destructuring patterns
    "no-eq-null": "error",                                         // disallow null comparisons without type-checking operators
    "no-eval": "error",                                            // disallow the use of eval()
    "no-extend-native": "off",                                     // disallow extending native types
    "no-extra-bind": "off",                                        // disallow unnecessary calls to .bind()
    "no-extra-label": "error",                                     // disallow unnecessary labels
    "no-fallthrough": "error",                                     // disallow fallthrough of case statements
    "no-floating-decimal": "off",                                  // disallow leading or trailing decimal points in numeric literals
    "no-global-assign": "error",                                   // disallow assignments to native objects or read-only global variables
    "no-implicit-coercion": "error",                               // disallow shorthand type conversions
    "no-implicit-globals": "off",                                  // disallow variable and function declarations in the global scope
    "no-implied-eval": "off",                                      // disallow the use of eval()-like methods
    "no-invalid-this": "off",                                      // disallow this keywords outside of classes or class-like objects
    "no-iterator": "error",                                        // disallow the use of the __iterator__ property
    "no-labels": "off",                                            // disallow labeled statements
    "no-lone-blocks": "off",                                       // disallow unnecessary nested blocks
    "no-loop-func": "error",                                       // disallow function declarations and expressions inside loop statements
    "no-magic-numbers": ["error", { "ignoreArrayIndexes": true }], // disallow magic numbers
    "no-multi-spaces": "warn",                                     // disallow multiple spaces
    "no-multi-str": "off",                                         // disallow multiline strings
    "no-new-func": "warn",                                         // disallow new operators with the Function object
    "no-new-wrappers": "off",                                      // disallow new operators with the String, Number, and Boolean objects
    "no-new": "error",                                             // disallow new operators outside of assignments or comparisons
    "no-octal-escape": "off",                                      // disallow octal escape sequences in string literals
    "no-octal": "error",                                           // disallow octal literals
    "no-param-reassign": "off",                                    // disallow reassigning function parameters
    "no-proto": "error",                                           // disallow the use of the __proto__ property
    "no-redeclare": "error",                                       // disallow variable redeclaration
    "no-restricted-properties": "off",                             // disallow certain properties on certain objects
    "no-return-assign": "off",                                     // disallow assignment operators in return statements
    "no-script-url": "error",                                      // disallow javascript: urls
    "no-self-assign": "error",                                     // disallow assignments where both sides are exactly the same
    "no-self-compare": "off",                                      // disallow comparisons where both sides are exactly the same
    "no-sequences": "off",                                         // disallow comma operators
    "no-throw-literal": "off",                                     // disallow throwing literals as exceptions
    "no-unmodified-loop-condition": "off",                         // disallow unmodified loop conditions
    "no-unused-expressions": "off",                                // disallow unused expressions
    "no-unused-labels": "error",                                   // disallow unused labels
    "no-useless-call": "off",                                      // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": "error",                                  // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": "warn",                                   // disallow unnecessary escape characters
    "no-useless-return": "error",                                  // disallow redundant return statements
    "no-void": "off",                                              // disallow void operators
    "no-warning-comments": ["off", { "terms": ["todo", "fixme", "xxx"], "location": "start" }],  // disallow specified warning terms in comments
    "no-with": "off",                                              // disallow with statements
    "radix": "off",                                                // enforce the consistent use of the radix argument when using parseInt()
    "vars-on-top": "off",                                          // require var declarations be placed at the top of their containing scope
    "wrap-iife": "off",                                            // require parentheses around immediate function invocations
    "yoda": ["error", "never", { "exceptRange": true }],           // require or disallow “Yoda” conditions


    ////////// Strict Mode //////////

    "strict": ["error", "function"],          // controls location of Use Strict Directives


    ////////// Variables //////////

    "no-catch-shadow": "off",             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": "off",               // disallow deletion of variables
    "no-label-var": "off",                // disallow labels that share a name with a variable
    "no-shadow": "off",                   // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": "off",  // disallow shadowing of names such as arguments
    "no-undef": "error",                    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": "off",               // disallow use of undefined when initializing variables
    "no-undefined": "off",                // disallow use of undefined variable (off by default)
    "no-unused-vars": "error",              // disallow declaration of variables that are not used in the code
    "no-use-before-define": "off",        // disallow use of variables before they are defined


    ////////// Node.js //////////

    "handle-callback-err": "off",   // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": ["off", false],     // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": "off",        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": "off",        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit": "off",       // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": "off", // restrict usage of specified node modules (off by default)
    "no-sync": "off",               // disallow use of synchronous methods (off by default)


    ////////// Stylistic Issues //////////

    "array-bracket-spacing": ["warn", "never"],       // enforce spacing inside array brackets (off by default)
    "brace-style": ["error", "1tbs"],                 // enforce one true brace style (off by default)
    "camelcase": "warn",                   // require camel case names
    "comma-spacing": ["warn", { "before": false, "after": true }],               // enforce spacing before and after comma
    "comma-style": ["error", "last"],                 // enforce one true comma style (off by default)
    "computed-property-spacing": ["warn", "never"],   // require or disallow padding inside computed properties (off by default)
    "consistent-this": ["warn", "context"],             // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": "warn",                    // enforce newline at the end of file, with no multiple empty lines
    "func-names": "off",                  // require function expressions to have a name (off by default)
    "func-style": ["error", "declaration", { "allowArrowFunctions": true }],                  // enforces use of function declarations or expressions (off by default)
    "indent": ["error", 4, { "VariableDeclarator": { "var": 1, "let": 1, "const": 2 }, "SwitchCase": 1 }],                      // this option sets a specific tab width for your code (off by default)
    "key-spacing": ["warn", { "beforeColon": false, "afterColon": true }],                 // enforces spacing between keys and values in object literal properties
    "keyword-spacing": "error", // enforce consistent spacing before and after keywords
    "lines-around-comment": "warn",        // enforces empty lines around comments (off by default)
    "linebreak-style": ["error", "unix"],             // disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
    "max-nested-callbacks": ["warn", 5],        // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": ["error", { "capIsNew": false }],                     // require a capital letter for constructors
    "new-parens": "error",                  // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": "off",           // allow/disallow an empty newline after var statement (off by default)
    "no-array-constructor": "warn",        // disallow use of the Array constructor
    "no-continue": "warn",                 // disallow use of the continue statement (off by default)
    "no-inline-comments": "warn",          // disallow comments inline after code (off by default)
    "no-lonely-if": "error",                // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": ["error", false],    // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": ["warn", {"max": 3, "maxEOF": 1}],     // disallow multiple empty lines (off by default)
    "no-nested-ternary": "error",           // disallow nested ternary expressions (off by default)
    "no-new-object": "warn",               // disallow use of the Object constructor
    "no-spaced-func": "error",              // disallow space between function identifier and application
    "no-ternary": "off",                  // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": "error",          // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": "off",        // disallow dangling underscores in identifiers
    "one-var": ["off", "always"],                     // allow just one var statement per function (off by default)
    "operator-assignment": ["off", "always"],         // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-linebreak": ["error", "before"],          // enforce operators to be placed before or after line breaks (off by default)
    "padded-blocks": ["warn", "never"],               // enforce padding within blocks (off by default)
    "quote-props": ["warn", "consistent"],                 // require quotes around object literal property names (off by default)
    "quotes": ["error", "single", {"avoidEscape": true, "allowTemplateLiterals": true}],                      // specify whether double or single quotes should be used
    "semi-spacing": ["error", {"before": false, "after": true}],                // enforce spacing before and after semicolons
    "semi": ["error", "always", { "omitLastInOneLineBlock": true}],                        // require or disallow use of semicolons instead of ASI
    "sort-vars": "off",                   // sort variables within the same declaration block (off by default)
    "space-before-blocks": ["error", "always"],         // require or disallow space before blocks (off by default)
    "space-before-function-paren": ["error", "never"], // require or disallow space before function opening parenthesis (off by default)
    "space-in-parens": ["warn", "never"],             // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": "error",             // require spaces around operators
    "space-unary-ops": ["error", { "words": true, "nonwords": false }],             // require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": ["warn", "always", { "line": { "exceptions": ["="] } }],              // require or disallow a space immediately following the // or /* in a comment (off by default)
    "wrap-regex": "off",                  // require regex literals to be wrapped in parentheses (off by default)


    ////////// ECMAScript 6 //////////

    "constructor-super": "off",      // verify super() callings in constructors (off by default)
    "generator-star-spacing": "off", // enforce the spacing around the * in generator functions (off by default)
    "no-this-before-super": "off",   // disallow to use this/super before super() calling in constructors (off by default)
    "no-var": "off",                 // require let or const instead of var (off by default)
    "object-shorthand": "off",       // require method and property shorthand syntax for object literals (off by default)
    "prefer-const": "off",           // suggest using of const declaration for variables that are never modified after declared (off by default)


    ////////// Legacy //////////

    "max-depth": ["warn", 4],                                     // specify the maximum depth that blocks can be nested (off by default)
    "max-len": ["off", 80, 4],                                   // specify the maximum length of a line in your program (off by default)
    "max-params": ["off", 3],                                    // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements": ["off", 10],                               // specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise": "error",                                         // disallow use of bitwise operators (off by default)
    "no-plusplus": ["error", { allowForLoopAfterthoughts: true }]  // disallow use of unary operators, ++ and -- (off by default)
  }
}
